remover( _, [], []).
remover( R, [R|T], T2) :- remover( R, T, T2).
remover( R, [H|T], [H|T2]) :- H \= R, remover( R, T, T2).

%Permutation sort
del(X,[X|List1],List1).
del(X,[Y|List],[Y|List1]):-del(X,List,List1).

list_permutation([],[]).
list_permutation(L,[X|P]):- del(X,L,L1),list_permutation(L1,P).


% Prolog predicate check divisibility of numbers in a list
divisible([], _, []).
divisible([H|T], X, [H|T1]) :- H mod X =:= 0, divisible(T, X, T1).
divisible([H|T], X, T1) :- H mod X =\= 0, divisible(T, X, T1).


% query
% divisible([4,6,8,7],2).

% response
% [4,6,8]

%---------------------------------------------------------------------------
%---------------------------------------------------------------------------
%List is properList(Xs) :-
%%     Xs is a proper list.
properList0(Xs) :-
         var(Xs), !,
         fail.
%%! second solution .
properList([]).
properList([_|T]) :-
        properList(T).
        
        
%-------------------------------------------------
%-------------------------------------------------
%% PreCond: Ls and Gs are proper lists of numbers.
%%
%% smaller(Ls,Gs) :-
%%     list Ls is lexicographically smaller than list Gs.

%% Solution:
smaller([],[]) :- !, fail.
smaller([], _) :- !.
smaller([H1|_], [H2|_]) :- H1 < H2, !.
smaller([H1|T1], [H2|T2]) :-H1=:=H2, smaller(T1,T2). 

% Goal
/*
| ?- smaller([],[]).
no
| ?- smaller([],[1,2]).
yes
| ?- smaller([1],[1,2]).
yes
| ?- smaller([1,3],[2,2]).
yes
| ?- smaller([2],[1,2]).
no
| ?- smaller([5,3,1],[5,3,1,2]).
yes
| ?- smaller([5,3,1.0],[5,3,1]).
no
| ?- smaller([5,3,1,0],[5,3,1]).
no
| ?- smaller([1,0,0,0],[9,9]).
yes
| ?- smaller([1.0],[1,2]).
yes
| ?- smaller([1],[2,2]).
yes
| ?- smaller([2,3,1],[2,3,2]).
yes
| ?- smaller([1.5],[1,2]).
no
| ?- smaller([1,2],[1.5]).
yes
| ?- \+smaller([],[]), smaller([],[1,2]),
     smaller([1],[1,2]), smaller([1,3],[2,2]),
     \+smaller([2],[1,2]), smaller([5,3,1],[5,3,1,2]),
     \+smaller([5,3,1.0],[5,3,1]), \+smaller([5,3,1,0],[5,3,1]),
     smaller([1,0,0,0],[9,9]), smaller([1.0],[1,2]),
     smaller([1],[2,2]), smaller([2,3,1],[2,3,2]),
     \+smaller([1.5],[1,2]), smaller([1,2],[1.5]).
yes
*/

/*
   maxlist(Xs,N) :- N is the maximum of the list of integers Xs.
*/
     maxlist([X|Xs],M) :- maxlist(Xs,X,M).

     % maxlist(Xs,M,N) :- N is the maximum of the list of integers [M|Xs]
     maxlist([X|Xs],Y,M) :- maximum(X,Y,Y1), maxlist(Xs,Y1,M).
     maxlist([],M,M).

	maximum(X,Y,Y) :- X =< Y.
	maximum(X,Y,X) :- X > Y.
%Finding the maximum of a list of integers
%-------------------------------------------------------------------------
| Checking the length of a list                                          |
%-------------------------------------------------------------------------

/*
   length_check(Xs,N) :- Xs is a list of length N.
*/
     length_check([_X|Xs],N) :- N > 0, N1 is N-1, length_check(Xs,N1).
     length_check([],0).


%-------------------------------------------------------------------------
| Generating a list of integers in a given range                         |
%-------------------------------------------------------------------------
/*
range(M,N,Ns) :- Ns is the list of integers between M and N inclusive.
*/
     range(M,N,[M|Ns]) :- M < N, M1 is M+1, range(M1,N,Ns).
     range(N,N,[N]).
     
 | ?- range(2,5,Range).
        1      1 Call: range(2,5,_1640059) ? 
        2      2 Call: 2<5 ? 
        2      2 Exit: 2<5 ? 
        3      2 Call: _1641095 is 2+1 ? 
        3      2 Exit: 3 is 2+1 ? 
        4      2 Call: range(3,5,_1641073) ? 
        5      3 Call: 3<5 ? 
        5      3 Exit: 3<5 ? 
        6      3 Call: _1644351 is 3+1 ? 
        6      3 Exit: 4 is 3+1 ? 
        7      3 Call: range(4,5,_1644329) ? 
        8      4 Call: 4<5 ? 
        8      4 Exit: 4<5 ? 
        9      4 Call: _1647597 is 4+1 ? 
        9      4 Exit: 5 is 4+1 ? 
       10      4 Call: range(5,5,_1647575) ? 
       11      5 Call: 5<5 ? 
       11      5 Fail: 5<5 ? 
       10      4 Exit: range(5,5,[5]) ? 
?       7      3 Exit: range(4,5,[4,5]) ? 
?       4      2 Exit: range(3,5,[3,4,5]) ? 
?       1      1 Exit: range(2,5,[2,3,4,5]) ? 
Range = [2,3,4,5] ? 
yes

